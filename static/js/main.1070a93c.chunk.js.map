{"version":3,"sources":["image/fullstack.png","doc/ChiranjivResume.pdf","components/NavBar.js","components/PortFolio.js","components/Resume.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","aboutPage","contactPage","useState","setHome","useEffect","className","to","href","target","Portfolio","alt","src","fullstack","ResumeViewer","location","useLocation","console","log","setNumPages","pageNumber","setAboutPage","file","Resume","options","workerSrc","onLoadSuccess","pages","App","exact","path","PortFolio","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,kRC0B5BC,MAvBf,YAA4C,IAA1BC,EAAyB,EAAzBA,UAAUC,EAAe,EAAfA,YAAe,EAEfC,oBAAS,GAFM,mBAE1BC,GAF0B,WAQvC,OAJAC,qBAAU,WACND,GAAQ,KACT,IAGC,oCACI,yBAAKE,UAAU,OACX,yBAAKA,UAAU,YACX,+CAEJ,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAASA,UAAWL,GAAaC,EAAc,GAAK,OAAQK,GAAG,KAAK,oCACpE,uBAAGC,KAAK,mDAAmDC,OAAO,UAAlE,YACA,kBAAC,IAAD,CAAUH,UAAWL,EAAY,QAAU,GAAIM,GAAG,iBAAiB,yCCSxEG,MAxBf,WAEE,OACE,oCACE,4BAAQJ,UAAU,cAChB,iCACE,kBAAC,EAAD,OAEF,8BACE,yBAAKA,UAAU,iBACb,qCACA,kDACA,8CAAmB,0BAAMA,UAAU,mBAAnC,KACA,uBAAGA,UAAU,UAAUE,KAAK,4CAA4CC,OAAO,UAA/E,eACA,uBAAGD,KAAK,wDAAwDC,OAAO,SAASH,UAAU,WAA1F,aAEF,yBAAKA,UAAU,kBACb,yBAAKK,IAAI,YAAYC,IAAKC,W,gCCiBvBC,MAjCf,WACI,IAAIC,EAAWC,cACnBC,QAAQC,IAAI,WAAWH,GAFC,MAGYZ,mBAAS,MAHrB,mBAGHgB,GAHG,aAIgBhB,mBAAS,GAJzB,mBAIbiB,EAJa,aAKcjB,oBAAS,IALvB,mBAKbF,EALa,KAKFoB,EALE,KAepB,OAJAhB,qBAAU,WACNgB,GAAa,KACd,IAGC,oCAEI,kBAAC,EAAD,CAAQpB,UAAWA,IAEnB,yBAAKK,UAAU,aACX,kBAAC,IAAD,CACIgB,KAAMC,IACNC,QAAS,CAAEC,UAAW,kBACtBC,cAjBc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC7BR,EAAYQ,KAkBA,kBAAC,IAAD,CAAMP,WAAYA,QCbvBQ,MAbf,WACE,OACE,oCACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAClB,kBAACC,EAAD,OAEA,kBAAC,IAAD,CAAQD,KAAK,iBACZ,kBAACP,EAAD,SCDeS,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCXNC,IAASC,OAAQ,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAyBC,SAASC,eAAe,SD4H3E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.1070a93c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fullstack.e28604a0.png\";","module.exports = __webpack_public_path__ + \"static/media/ChiranjivResume.490957d8.pdf\";","import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction NavBar({ aboutPage,contactPage }) {\r\n\r\n    const [home, setHome] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setHome(true);\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"nav\">\r\n                <div className=\"leftlogo\">\r\n                    <h1>Chiranjib Rout</h1>\r\n                </div>\r\n                <div className=\"rightMenu\">\r\n                    <NavLink className={aboutPage || contactPage ? \"\" : \"home\"} to=\"/\" ><a>Home</a></NavLink>\r\n                    <a href=\"https://github.com/Chiranjivnit?tab=repositories\" target=\"_blank\">Projects</a>\r\n                    <NavLink  className={aboutPage ? \"about\" : \"\"} to='/resumeViewer' ><a>About</a></NavLink>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\nexport default NavBar;","import React from \"react\";\r\nimport \"../App.css\";\r\nimport fullstack from '../image/fullstack.png';\r\nimport NavBar from './NavBar';\r\n\r\nfunction Portfolio() {\r\n\r\n  return (\r\n    <>\r\n      <header className=\"top_header\">\r\n        <section>\r\n          <NavBar/>\r\n        </section>\r\n        <main>\r\n          <div className=\"leftContainer\">\r\n            <h3>Hello</h3>\r\n            <h1>I'm Chiranjib Rout</h1>\r\n            <h2>MERN Developer <span className=\"content_change\"></span> </h2>\r\n            <a className=\"button1\" href=\"https://github.com/Chiranjivnit/portfolio\" target=\"_blank\" >Source Code</a>\r\n            <a href=\"https://www.linkedin.com/in/chiranjiv-rout-904662139/\" target=\"_blank\" className=\"button2\" >Linkedin</a>\r\n          </div>\r\n          <div className=\"rightContainer\">\r\n            <img alt=\"fullstack\" src={fullstack} ></img>\r\n          </div>\r\n        </main>\r\n      </header>\r\n    </>\r\n  );\r\n}\r\nexport default Portfolio;\r\n","import React, { useEffect, useState } from 'react';\r\nimport NavBar from './NavBar';\r\nimport { Document, Page } from 'react-pdf';\r\nimport Resume from '../doc/ChiranjivResume.pdf';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction ResumeViewer() {\r\n    let location = useLocation()\r\nconsole.log('location',location)\r\n    const [numpages, setNumPages] = useState(null);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [aboutPage, setAboutPage] = useState(false);\r\n\r\n    const onDocumentLoadSuccess = ({ pages }) => {\r\n        setNumPages(pages);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setAboutPage(true);\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n          \r\n            <NavBar aboutPage={aboutPage}/>\r\n                \r\n            <div className=\"pdfViewer\">\r\n                <Document\r\n                    file={Resume}\r\n                    options={{ workerSrc: \"/pdf.worker.js\" }}\r\n                    onLoadSuccess={onDocumentLoadSuccess}\r\n                >\r\n                    <Page pageNumber={pageNumber} />\r\n                </Document>\r\n            </div>\r\n            {/* <p>page{pageNumber} of {numpages}</p> */}\r\n        </>\r\n    )\r\n}\r\nexport default ResumeViewer;","import React from 'react';\nimport PortFolio from './components/PortFolio';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport ResumeViewer from './components/Resume';\n\nfunction App() {\n  return (\n    <>\n    <Route exact path=\"/\">\n    <PortFolio/>\n    </Route>\n    <Route  path=\"/resumeViewer\">\n     <ResumeViewer/>\n    </Route>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render( <BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}